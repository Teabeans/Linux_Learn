To set up and install Git:

Overview:
-- Git_Setup.txt --
1) Install Git to Ubuntu Linux via the command line interface
2) Register a GitHub account

-- Git_RepoCreate.txt --
3) Create a new repository from Linux
4) Create a new file in the repository
5) Commit and push the changes to GitHub

-- Git_RepoPull.txt --
6) Create a new repository in GitHub
7) Create a new file in GitHub
8) Pull the repository and file from GitHub to the local machine

-- Git_RepoPush.txt --
9) Affect a change to the repository
10) Push the change back to the repository

================================================================================
STEP 1 - INSTALL GIT TO UBUNTU LINUX VIA THE COMMAND LINE INTERFACE
================================================================================

From the CLI, enter the command:

  $ git --version

If Git is already installed, you will see the version report. As of 2019.01.18, this was:

  git version 2.17.1

If Git is not installed, the command will not be recognized. In this case, you should update/upgrade your system prior to attemping to install Git using the commands:

  $ sudo apt-get update
  $ sudo apt-get upgrade

These may be combined to the single command

  $ sudo apt-get update && sudo apt-get upgrade -y

When the update/upgrade is complete, install Git with the command:

  $ sudo apt-get install git

Perform the update/upgrade again to ensure that Git's latest version is installed.

  $ sudo apt-get update
  $ sudo apt-get upgrade
  
Lastly, validate the installed version number again with

  $ git --version

Note: Other builds of Linux may have variations to these commands, but the general idea is the same:
  - Refresh your system
  - Use a package manager to locate and install Git
  - Clean the installation and acquire any relevant patches.

At this point, you have effectively installed the Git client to your Linux environment. From here, you may pull other repositories, generate changes, create branches, and push these changes back to the repo. You do not, however, have a version control system for yourself, and your own files remain subject to loss or damage based on the health of your machine.

To generate an online repository, proceed to the next step.

================================================================================
STEP 2 - REGISTER A GITHUB ACCOUNT
================================================================================

While multiple services for hosting Git repositories exist, GitHub is one of the more common and well-known ones. The following steps detail the process of registering a GitHub account and hosting a repository therein.

<TODO> Registration steps
1) Click the 'Sign Up' button in the upper right corner or by filling in the requested information fields and clicking the large green 'Sign Up' button.
2) Go to www.github.com/<YourUsername>

ie. www.github.com/teabeans
Note: The address is not case sensitive

-- APPENDIX A -- Contents of Git's help file
$ git --help
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   branch     List, create, or delete branches
   checkout   Switch branches or restore working tree files
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   merge      Join two or more development histories together
   rebase     Reapply commits on top of another base tip
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
